#!/bin/bash

set -eou pipefail

ROOT=$(cd $(dirname $0)/..; pwd)
source ${ROOT}/env

DOCKER_MACHINE_NAME=${DOCKER_MACHINE_NAME:-dev}
DECONST=$(docker-machine ip ${DOCKER_MACHINE_NAME})

CONTENT_STORE_URL=http://${DECONST}:9000/

if [ "${1:-}" = "--stage" ] || [ "${1:-}" = "-s" ]; then
  CONTENT_STORE_URL=http://${DECONST}:9001/
  shift
fi

if [ -z "${1:-}" ]; then
  cat <<EOM 1>&2
Usage: script/add-jekyll [--stage|-s] <path>

 --stage|-s - Submit content to the staging endpoint.
 path - Path to a Jekyll content repository.

EOM
  exit 1
fi

# Acquire an API key.
export CONTENT_STORE_APIKEY=$(curl -s \
  -X POST \
  -H "Authorization: deconst ${ADMIN_APIKEY}" \
  ${CONTENT_STORE_URL}keys?named=jekyll |
  python -c 'import sys, json; print json.load(sys.stdin)["apikey"]')

# If a custom CONTENT_ID_BASE is set in the environment, use it. Otherwise, read it from your
# _deconst.json file.
if [ -z "${CONTENT_ID_BASE:-}" ]; then
  CONTENT_ID_BASE=$(python -c "import json; print json.load(open('${1}/_deconst.json'))['contentIDBase']")
fi

# Derive CONTAINER_ROOT.
if [ -z "${CONTAINER_ROOT:-}" ]; then
  CONTAINER_ROOT="$(cd ${1} && git rev-parse --show-toplevel)"
fi

# Run the Jekyll builder (from a Docker container) on the provided content repository.
docker run \
  --rm=true \
  -e ENVELOPE_DIR=${CONTAINER_ROOT}/_site/deconst-envelopes \
  -e ASSET_DIR=${CONTAINER_ROOT}/_site/deconst-assets \
  -e CONTENT_ID_BASE=${CONTENT_ID_BASE} \
  -e VERBOSE=${VERBOSE:-} \
  -e CONTENT_ROOT=${1} \
  -v ${CONTAINER_ROOT}:${CONTAINER_ROOT} \
  quay.io/deconst/preparer-jekyll

# Run the submitter on the generated output.
docker run \
  --rm=true \
  -e ENVELOPE_DIR=${CONTAINER_ROOT}/_site/deconst-envelopes \
  -e ASSET_DIR=${CONTAINER_ROOT}/_site/deconst-assets \
  -e CONTENT_SERVICE_URL=${CONTENT_STORE_URL} \
  -e CONTENT_SERVICE_APIKEY=${CONTENT_STORE_APIKEY} \
  -e CONTENT_ID_BASE=${CONTENT_ID_BASE} \
  -e VERBOSE=${VERBOSE:-} \
  -e CONTENT_ROOT=${1} \
  -v ${CONTAINER_ROOT}:${CONTAINER_ROOT} \
  quay.io/deconst/submitter
